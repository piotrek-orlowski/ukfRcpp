// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ukfRcpp.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cholupdate
arma::mat cholupdate(arma::mat RMat, arma::vec xVec, double nu);
RcppExport SEXP _ukfRcpp_cholupdate(SEXP RMatSEXP, SEXP xVecSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type RMat(RMatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xVec(xVecSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(cholupdate(RMat, xVec, nu));
    return rcpp_result_gen;
END_RCPP
}
// generateSigmaPoints
arma::mat generateSigmaPoints(const arma::mat xMat, const double gam, const arma::mat PMatChol, const int L);
RcppExport SEXP _ukfRcpp_generateSigmaPoints(SEXP xMatSEXP, SEXP gamSEXP, SEXP PMatCholSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type xMat(xMatSEXP);
    Rcpp::traits::input_parameter< const double >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type PMatChol(PMatCholSEXP);
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(generateSigmaPoints(xMat, gam, PMatChol, L));
    return rcpp_result_gen;
END_RCPP
}
// generateSigmaWeights
arma::mat generateSigmaWeights(const int L, const double alpha, const double beta);
RcppExport SEXP _ukfRcpp_generateSigmaWeights(SEXP LSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(generateSigmaWeights(L, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// testUKFclass
Rcpp::List testUKFclass(int Nlength);
RcppExport SEXP _ukfRcpp_testUKFclass(SEXP NlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Nlength(NlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(testUKFclass(Nlength));
    return rcpp_result_gen;
END_RCPP
}
// testSqrtUKFclass
Rcpp::List testSqrtUKFclass(int Nlength);
RcppExport SEXP _ukfRcpp_testSqrtUKFclass(SEXP NlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Nlength(NlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(testSqrtUKFclass(Nlength));
    return rcpp_result_gen;
END_RCPP
}
// unscentedKalmanFilter
List unscentedKalmanFilter(const arma::mat dataMat, const arma::vec initState, const arma::mat initProcCov, const List modelParams, SEXP predict_XPtr, SEXP evaluate_XPtr, SEXP control_XPtr);
RcppExport SEXP _ukfRcpp_unscentedKalmanFilter(SEXP dataMatSEXP, SEXP initStateSEXP, SEXP initProcCovSEXP, SEXP modelParamsSEXP, SEXP predict_XPtrSEXP, SEXP evaluate_XPtrSEXP, SEXP control_XPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type dataMat(dataMatSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type initState(initStateSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type initProcCov(initProcCovSEXP);
    Rcpp::traits::input_parameter< const List >::type modelParams(modelParamsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type predict_XPtr(predict_XPtrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type evaluate_XPtr(evaluate_XPtrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type control_XPtr(control_XPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(unscentedKalmanFilter(dataMat, initState, initProcCov, modelParams, predict_XPtr, evaluate_XPtr, control_XPtr));
    return rcpp_result_gen;
END_RCPP
}
// unscentedMean
arma::mat unscentedMean(const arma::mat xSigma, const arma::vec unscWts);
RcppExport SEXP _ukfRcpp_unscentedMean(SEXP xSigmaSEXP, SEXP unscWtsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type xSigma(xSigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type unscWts(unscWtsSEXP);
    rcpp_result_gen = Rcpp::wrap(unscentedMean(xSigma, unscWts));
    return rcpp_result_gen;
END_RCPP
}
// unscentedCov
arma::mat unscentedCov(const arma::mat xSigma, const arma::vec unscWtsMean, const arma::vec unscWtsCov);
RcppExport SEXP _ukfRcpp_unscentedCov(SEXP xSigmaSEXP, SEXP unscWtsMeanSEXP, SEXP unscWtsCovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type xSigma(xSigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type unscWtsMean(unscWtsMeanSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type unscWtsCov(unscWtsCovSEXP);
    rcpp_result_gen = Rcpp::wrap(unscentedCov(xSigma, unscWtsMean, unscWtsCov));
    return rcpp_result_gen;
END_RCPP
}
// unscentedCrossCov
arma::mat unscentedCrossCov(const arma::mat xSigma, const arma::mat ySigma, const arma::vec unscWtsMean, const arma::vec unscWtsCov);
RcppExport SEXP _ukfRcpp_unscentedCrossCov(SEXP xSigmaSEXP, SEXP ySigmaSEXP, SEXP unscWtsMeanSEXP, SEXP unscWtsCovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type xSigma(xSigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ySigma(ySigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type unscWtsMean(unscWtsMeanSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type unscWtsCov(unscWtsCovSEXP);
    rcpp_result_gen = Rcpp::wrap(unscentedCrossCov(xSigma, ySigma, unscWtsMean, unscWtsCov));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ukfRcpp_cholupdate", (DL_FUNC) &_ukfRcpp_cholupdate, 3},
    {"_ukfRcpp_generateSigmaPoints", (DL_FUNC) &_ukfRcpp_generateSigmaPoints, 4},
    {"_ukfRcpp_generateSigmaWeights", (DL_FUNC) &_ukfRcpp_generateSigmaWeights, 3},
    {"_ukfRcpp_testUKFclass", (DL_FUNC) &_ukfRcpp_testUKFclass, 1},
    {"_ukfRcpp_testSqrtUKFclass", (DL_FUNC) &_ukfRcpp_testSqrtUKFclass, 1},
    {"_ukfRcpp_unscentedKalmanFilter", (DL_FUNC) &_ukfRcpp_unscentedKalmanFilter, 7},
    {"_ukfRcpp_unscentedMean", (DL_FUNC) &_ukfRcpp_unscentedMean, 2},
    {"_ukfRcpp_unscentedCov", (DL_FUNC) &_ukfRcpp_unscentedCov, 3},
    {"_ukfRcpp_unscentedCrossCov", (DL_FUNC) &_ukfRcpp_unscentedCrossCov, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ukfRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
